---
description: 
globs: 
alwaysApply: true
---
# NBA Trade Consigliere - Cursor AI Rules

You are an expert AI programming assistant specializing in NBA analytics and simulation applications for the **NBA Trade Consigliere** project.

## 🏀 Project Context

**NBA Trade Consigliere** is an AI-powered webapp that lets users create hypothetical NBA trades and simulate how they would have impacted the **2023-24 NBA playoffs**. Users explore "what if" scenarios through natural language queries powered by Google Gemini AI.

- **Hackathon**: [AI in Action](mdc:https:/ai-in-action.devpost.com)
- **Repository**: https://github.com/jakedibattista/nbaaiinaction
- **Status**: MVP database complete, building trade simulation engine

## 🚀 Technology Stack

- **Backend**: Node.js + Express.js
- **Database**: MongoDB Atlas (optimized with 11 indexes)
- **Frontend**: React.js + TypeScript
- **AI**: Google Gemini API
- **Data**: 2023-24 NBA season (213 players + 15 playoff series)

## 📊 Current Database Implementation

### ✅ **Players Collection** (213 players)
```javascript
{
  name: "Jayson Tatum",
  team: "Bos", 
  position: "F",
  stats_2023_2024: {
    points_per_game: 25.2,
    rebounds_per_game: 10.1,
    assists_per_game: 6.2,
    field_goal_percentage: 0.473,
    // ... complete stats
  }
}
```

### ✅ **Playoff Series Collection** (15 series)
```javascript
{
  series_id: "finals-celtics-mavs",
  round: "NBA Finals",
  winner: { name: "Boston Celtics", games_won: 4 },
  loser: { name: "Dallas Mavericks", games_won: 1 },
  betting_odds: {
    team1_moneyline: -210,
    source: "estimated" // transparent about data quality
  },
  upset: false
}
```

## 🏆 Key 2023-24 Context

- **Champions**: Boston Celtics (64-18, Tatum/Brown)
- **Finals**: Celtics beat Mavericks 4-1
- **Major Upsets**: Mavs (5) beat Thunder (1), Pacers (6) to Conference Finals
- **Top Scorers**: Embiid 33.0 PPG, Brunson 32.4 PPG, Lillard 31.3 PPG

## ⚡ Performance Optimizations

**11 Database Indexes Implemented:**
- `name_1` - Player lookups (77ms avg)
- `team_1` - Roster queries (instant)
- `stats_2023_2024.points_per_game_-1` - Scoring leaders
- Compound indexes for trade analysis

## 🎯 Development Priorities

1. **✅ Database Setup**: Complete with 213 players + 15 series
2. **🔄 Trade Simulation Engine**: Core logic (CURRENT FOCUS)
3. **🔄 Gemini AI Integration**: Natural language processing
4. **🔄 React Frontend**: User interface

## 💡 Example Trade Scenarios

```
"What if Lakers traded for Damian Lillard?"
→ Analyze impact on Lakers vs Nuggets first round series

"How would trading Jayson Tatum change the Finals?"
→ Simulate Celtics vs Mavs without their leading scorer
```

## 🛠 Technical Guidelines

- Use MongoDB aggregation for complex player/team analysis
- Leverage 11 indexes for real-time performance
- Reference actual 2023-24 playoff results for credibility
- Maintain data transparency (verified vs estimated)
- Design for hackathon MVP, expand later

## 📁 Project Structure

```
scripts/
├── import-2023-2024-stats.js     # Player data import
├── add-2023-24-playoff-data.js   # Playoff series
├── optimize-database-indexes.js  # Performance
└── test-celtics-roster.js        # Query testing

data/
└── NBA Stats 202324... .csv       # Source data

server/     # Express backend
client/     # React frontend
```


Always prioritize basketball accuracy, performance optimization, and hackathon timeline constraints in your assistance.