---
description: 
globs: 
alwaysApply: true
---
# NBA Trade Consigliere - Cursor AI Rules

You are an expert AI programming assistant specializing in NBA analytics and AI-powered trade simulation for the **NBA Trade Consigliere** project.

## 🏀 Project Context

**NBA Trade Consigliere** is an AI-powered webapp that lets users create hypothetical NBA trades and simulate how they would have impacted the **2023-24 NBA playoffs**. Users explore "what if" scenarios through natural language queries powered by Google Gemini AI with full salary cap compliance.

- **Hackathon**: @AI in Action
- **Repository**: https://github.com/jakedibattista/nbaaiinaction
- **Status**: 🎯 **AI Agent Backend Complete** → Building React UX

## 🚀 Technology Stack

- **Backend**: **Dual-Server Architecture**
    - **AI Chat Server**: Node.js + Express.js (`server/index.js`)
    - **Data API Server**: Cursor's MongoDB Controller (MCP) on `localhost:8765`
- **Database**: MongoDB Atlas (15 optimized indexes, 99.5% salary coverage)
- **Frontend**: React.js + TypeScript *(Current Focus)*
- **AI**: Google Gemini 1.5 Flash (`gemini-1.5-flash-latest`)
- **Data**: Complete 2023-24 season + CBA compliance

## 🏆 Core AI Architecture (`simplified-chat-handler.js`)

The heart of the AI is a three-step process designed for fast, accurate, and context-aware responses:

1.  **Classify Query**: Uses regex and keyword analysis to classify a user's natural language query into one of three categories: `Player`, `Team`, or `Trade`.
2.  **Fetch Data**: Makes targeted HTTP requests to the **MCP Data API Server** to retrieve structured JSON data relevant to the query (e.g., player stats, team salaries).
3.  **Generate Response**: Injects the fetched data into a dynamically generated, context-rich "system prompt" and sends it to the **Gemini 1.5 Flash** model to generate a comprehensive, expert-level analysis.

This architecture ensures that the AI's response is grounded in real, accurate data from our database.

### ✅ **Players Collection** (213/214 players with salary data)
```javascript
{
  name: "Luka Dončić",
  team: "Dal", 
  position: "G",
  salary_2023_2024: 40100000,  // Real contract data
  stats_2023_2024: {
    points_per_game: 32.4,
    rebounds_per_game: 9.1,
    assists_per_game: 9.8,
    field_goal_percentage: 0.473,
    // ... complete statistical profile
  }
}
```

### ✅ **CBA Rules Collection** (Complete 2023 NBA compliance)
```javascript
{
  year: 2023,
  salary_cap: 136021000,      // $136.0M
  luxury_tax: 165294000,      // $165.3M  
  first_apron: 172346000,     // $172.3M
  second_apron: 182794000,    // $182.8M
  trade_rules: {
    first_apron_restrictions: [/* detailed rules */],
    second_apron_restrictions: [/* severe restrictions */]
  }
}
```

### ✅ **Playoff Series Collection** (15 complete series)
```javascript
{
  series_id: "finals-celtics-mavs",
  round: "NBA Finals",
  winner: { name: "Boston Celtics", games_won: 4 },
  loser: { name: "Dallas Mavericks", games_won: 1 },
  upset: false
}
```

## 🎯 Current Development Focus

### 🔥 **Phase 2: AI Agent Development** *(COMPLETE)*
- **Natural Language Classifier**: `classifyQuery()` accurately routes user intent.
- **MCP Data Integration**: `fetchData()` methods retrieve real-time stats.
- **Dynamic Prompt Engineering**: `createSystemPrompt()` grounds AI in facts.
- **Gemini 1.5 Integration**: Uses the latest `gemini-1.5-flash-latest` model.

### 🎨 **Phase 3: React UX** *(PRIORITY)*
- **Modern React Components**: TypeScript + hooks
- **Interactive Trade Builder**: Drag-and-drop interface
- **Real-time Visualizations**: Salary cap charts, team rosters
- **Mobile-first Design**: Beautiful responsive experience

## 🤖 AI Agent Requirements

### 🧠 **Natural Language Understanding**
```
Input: "What if Dallas traded Luka for Jayson Tatum?"
AI Process:
1. `classifyQuery` identifies this as a 'trade' query.
2. `fetchTradeData` calls MCP API `/api/trade/analyze` with ["Luka Dončić", "Jayson Tatum"].
3. `createTradePrompt` builds a prompt with the returned salary/CBA analysis.
4. Gemini generates a response analyzing the trade's impact.
```

### 📊 **Complex Trade Intelligence**
```
Input: "Show me trades to get Warriors under luxury tax"
AI Process:
1. `classifyQuery` identifies this as a 'team' query.
2. `fetchTeamData` calls MCP API `/api/team/Golden%20State%20Warriors/salary`.
3. `createTeamPrompt` injects payroll data into a prompt for Gemini.
4. Gemini analyzes the data and suggests trade scenarios.
```

### 🏆 **Championship Impact Analysis**
```
Input: "Could Miami have beaten Boston with better rebounding?"
AI Process:
1. `classifyQuery` identifies this as a 'team' query.
2. `fetchTeamData` gets Miami's roster from MCP.
3. `createTeamPrompt` notes roster weaknesses (e.g., rebounding stats).
4. Gemini suggests available rebounders that fit salary constraints and analyzes impact.
```

## ⚡ Database Performance

**15 Optimized Indexes (Sub-100ms queries via MCP):**
- `name_1` - Player lookups (77ms avg)
- `salary_2023_2024_-1` - High-salary queries (76ms)
- `team_1_salary_2023_2024_-1` - Roster analysis (75ms)
- `position_1_salary_2023_2024_-1` - Positional trades
- Compound indexes for complex aggregations

## 💰 Salary Cap Context (2023-24 Season)

### 🚨 **Apron Teams** (Trade Restricted)
- **Second Apron** ($182.8M+): Cannot aggregate salaries
- **First Apron** ($172.3M+): Cannot take back more than sent out
- **Luxury Tax** ($165.3M+): Repeater penalties apply

### 💡 **Key Trade Scenarios**
- **Boston Celtics**: Championship team at Second Apron
- **Golden State Warriors**: Aging core, luxury tax decisions
- **Phoenix Suns**: Star talent, salary cap constraints
- **Dallas Mavericks**: Finals team, flexible salary structure

## 🛠 Technical Guidelines

### 🎯 **AI Agent Development**
- Use **Cursor's MongoDB Controller (MCP)** for all database interactions.
- All AI logic is centralized in `server/simplified-chat-handler.js`.
- Add new query types or improve data fetching within the handler.
- Enhance dynamic system prompts in `createSystemPrompt` for better AI responses.

### 🎨 **React UX Development**
- Modern TypeScript components with proper types
- Real-time data updates via React hooks
- Beautiful, mobile-first design patterns
- Interactive visualizations (salary caps, team rosters)
- Seamless integration with AI agent responses

### 📊 **Basketball Accuracy**
- Reference actual 2023-24 playoff results
- Use verified salary data (99.5% coverage)
- Implement real CBA compliance rules
- Maintain data transparency (verified vs estimated)

## 📁 Current Project Structure

```
nbaaiinaction/
├── server/
│   ├── index.js                      # Express.js API Server
│   └── simplified-chat-handler.js    # CORE AI LOGIC: Classifier, Data Fetcher, Prompt Engineer
├── client/                           # React frontend (Next)
│   ├── components/                   # UI components
│   ├── hooks/                        # Custom React hooks
│   └── services/                     # API integration
└── data/                             # Archived CSV files
```

*Note: The **MCP Data Server** runs separately within Cursor and exposes the database via a REST API on `localhost:8765`. It is not part of this repository's file structure.*

## 🎮 Example Development Tasks

### 🤖 **AI Agent Tasks**
```javascript
// Enhance simplified-chat-handler.js to recognize a new query type

// 1. Add a new classification condition
classifyQuery(query) {
  if (query.includes('who is the best')) {
    return 'comparison';
  }
  // ... other classifications
}

// 2. Add a new data fetching method
async fetchData(query, queryType) {
  if (queryType === 'comparison') {
    return await this.fetchComparisonData(query);
  }
  // ... other fetchers
}

// 3. Add a new prompt creation method
createSystemPrompt(queryType, data) {
    if (queryType === 'comparison') {
        return this.createComparisonPrompt(data);
    }
    // ... other prompts
}
```

### ⚛️ **React UX Tasks**
```typescript
// Create TradeBuilder component
interface TradeBuilderProps {
  onTradeSubmit: (trade: TradeScenario) => void;
  salaryCap: CBAData;
  availablePlayers: Player[];
}
```

## 🏆 Success Metrics

### ✅ **Technical Achievements**
- **Dual-Server Backend**: Decoupled chat logic from data access.
- **Data-Grounded AI**: Gemini responses are built on real-time database facts.
- **CBA**: Complete 2023 rule implementation (via MCP analysis).
- **Performance**: Production-ready, optimized architecture.

### 🎯 **User Experience Goals**
- **Intuitive**: Natural language → instant realistic results
- **Accurate**: All trades pass real CBA validation
- **Engaging**: Beautiful, interactive trade scenarios
- **Mobile**: Seamless experience on all devices

## 🚀 Hackathon Philosophy

**Focus Areas:**
1. **AI Intelligence**: Make complex NBA trades simple through natural language
2. **Basketball Accuracy**: Every simulation grounded in real 2023-24 data
3. **User Delight**: Beautiful, intuitive interface that makes trading fun
4. **Technical Excellence**: Production-ready code that performs flawlessly

Always prioritize **user experience**, **basketball accuracy**, and **AI sophistication** in your development assistance.