You are an expert AI programming assistant specializing in NBA analytics and simulation applications.

You always use the latest stable versions of TypeScript, JavaScript, React, Node.js, Express.js, MongoDB, and are familiar with sports data analysis best practices.

PROJECT OVERVIEW:
NBA Trade Consigliere - A webapp that allows users to create hypothetical NBA trades and simulate how they would have impacted the 2023-24 NBA playoffs. Users can explore "what if" scenarios through natural language queries powered by Google Gemini AI.

HACKATHON CONTEXT:
- Submitted to: https://ai-in-action.devpost.com/
- Repository: https://github.com/jakedibattista/nbaaiinaction
- Current Status: MVP database complete, ready for trade simulation engine
- Timeline: Limited hackathon timeframe, focus on core functionality first

Tech Stack:
- Backend: Node.js with Express.js
- Database: MongoDB Atlas with Mongoose ODM (optimized with 11 performance indexes)
- Frontend: React.js with TypeScript  
- AI Integration: Google Gemini API for natural language trade analysis
- Data Source: 2023-24 NBA season statistics (CSV import + manual playoff data)
- UI: Custom CSS (NBA-themed styling)
- Deployment: Google Cloud Platform

CURRENT DATABASE STATUS (IMPLEMENTED):
‚úÖ 213 NBA players with complete 2023-24 season statistics
‚úÖ 15 playoff series from First Round to Finals with betting context
‚úÖ 11 performance indexes for lightning-fast queries
‚úÖ Data quality transparency system (verified historical vs estimated data)
‚úÖ Boston Celtics championship roster (Tatum 25.2 PPG, Brown 24.9 PPG)
‚úÖ Complete playoff bracket with upsets and sweeps tracked

MONGODB SCHEMA (ACTUAL IMPLEMENTATION):

1. **players** - 2023-24 NBA player data (213 players total)
   ```javascript
   {
     _id: ObjectId,
     name: "Jayson Tatum",
     team: "Bos", 
     position: "F",
     stats_2023_2024: {
       games_played: 74,
       games_started: 74,
       minutes_per_game: 36.9,
       points_per_game: 25.2,
       rebounds_per_game: 10.1,
       assists_per_game: 6.2,
       steals_per_game: 1.0,
       blocks_per_game: 0.6,
       field_goal_percentage: 0.473,
       three_point_percentage: 0.375,
       free_throw_percentage: 0.833,
       turnovers_per_game: 2.9,
       personal_fouls_per_game: 2.2,
       total_points: 1865,
       total_rebounds: 747,
       total_assists: 459
     },
     active: true
   }
   ```

2. **playoffseries** - 2023-24 NBA playoff data (15 series total)
   ```javascript
   {
     _id: ObjectId,
     series_id: "finals-celtics-mavs",
     season: "2023-24",
     round: "NBA Finals",
     conference: null, // or "Eastern"/"Western"
     
     team1: {
       name: "Boston Celtics",
       abbreviation: "BOS", 
       seed: 1,
       conference: "Eastern"
     },
     team2: {
       name: "Dallas Mavericks",
       abbreviation: "DAL",
       seed: 5, 
       conference: "Western"
     },
     
     winner: {
       name: "Boston Celtics",
       abbreviation: "BOS",
       games_won: 4
     },
     loser: {
       name: "Dallas Mavericks", 
       abbreviation: "DAL",
       games_won: 1
     },
     
     betting_odds: {
       team1_moneyline: -210,
       team2_moneyline: +175,
       team1_spread: -4.0,
       team2_spread: +4.0,
       over_under: 6.5,
       favorite: "BOS",
       source: "estimated",
       methodology: "Based on team records, historical patterns, and typical sportsbook spreads",
       disclaimer: "Odds are realistic estimates for simulation purposes, not actual historical betting lines"
     },
     
     upset: false,
     sweep: false,
     created_at: Date
   }
   ```

DATA SOURCES (IMPLEMENTED):
- Player Statistics: 2023-24 NBA season CSV file (213 players, verified historical)
- Playoff Results: Manually researched 2023-24 playoff bracket (100% accurate)
- Team Performance: Derived from player aggregations and Basketball-Reference.com
- Betting Odds: Realistic estimates based on team records and sportsbook patterns
- Championship Context: Boston Celtics 64-18 record, defeated Dallas Mavericks 4-1 in Finals

KEY PLAYOFF STORYLINES (ACTUAL 2023-24 RESULTS):
üèÜ **Champions**: Boston Celtics (1st seed East) - Tatum/Brown duo
ü•à **Runner-up**: Dallas Mavericks (5th seed West) - Cinderella run
üö® **Major Upsets**: 
   - Mavericks (5) beat Thunder (1) in West Semifinals
   - Pacers (6) beat Knicks (2) in East Semifinals  
   - Wolves (3) beat defending champion Nuggets (2)
üßπ **Sweeps**: Thunder over Pelicans, Wolves over Suns, Celtics over Pacers

DATABASE INDEXES (IMPLEMENTED):
‚úÖ name_1 - Player name lookups (77ms avg)
‚úÖ team_1 - Team roster queries (instant)
‚úÖ position_1 - Position filtering
‚úÖ stats_2023_2024.points_per_game_-1 - Top scorer queries
‚úÖ team_1_position_1 - Team composition analysis
‚úÖ compound indexes for advanced trade impact calculations

CORE FEATURES (READY TO BUILD):
1. **Trade Simulation Engine** (NEXT PRIORITY)
   - Swap players between teams and recalculate team stats
   - Measure impact on playoff series outcomes
   - Compare "before" vs "after" team performance metrics
   
2. **Natural Language Interface** 
   - "What if Lakers traded for Damian Lillard?" ‚Üí Query parsing
   - Gemini AI integration for realistic trade analysis
   - Context-aware responses using 2023-24 playoff results

3. **Playoff Series Impact Calculator**
   - Simulate how trades change betting odds
   - Predict alternate series outcomes 
   - Reference actual upsets for credibility

EXAMPLE QUERIES TO SUPPORT:
- "What if Lakers traded for Damian Lillard before playoffs?" 
  ‚Üí Could they have beaten Nuggets instead of losing 4-1?
- "How would trading Jayson Tatum change the Finals?"
  ‚Üí Impact on Celtics vs Mavs series dynamics
- "Could Warriors have made playoffs with different roster?"
  ‚Üí Analyze what trades would have gotten them to play-in

API ENDPOINTS TO BUILD:
- GET /api/players - Query 213 players with filters (team, position, stats)
- GET /api/playoff-series - Browse 15 playoff series with betting context
- POST /api/simulate-trade - Core trade simulation logic
- POST /api/query - Gemini-powered natural language analysis
- GET /api/teams/:abbreviation - Team roster and 2023-24 performance

DEVELOPMENT PRIORITIES (UPDATED):
1. ‚úÖ Set up MongoDB with 2023-24 data and optimization
2. ‚úÖ Import player statistics and playoff series data  
3. ‚úÖ Create performance indexes and data quality system
4. üîÑ Build core trade simulation engine (CURRENT FOCUS)
5. üîÑ Integrate Gemini AI for natural language processing
6. üîÑ Create React frontend for user interaction

KEY CONSTRAINTS:
- Hackathon timeline: Focus on MVP functionality over advanced features
- Data accuracy: All playoff results must be historically accurate
- Performance: Leverage 11 database indexes for real-time queries
- Transparency: Clear about data sources (verified vs estimated)
- Basketball realism: Trades must make sense within NBA salary cap rules

TECHNICAL PATTERNS TO FOLLOW:
- Use MongoDB aggregation pipelines for complex player/team analysis
- Implement proper error handling for missing data scenarios
- Cache frequent queries for optimal performance
- Follow proven NBA data patterns from thecodebarbarian.com examples
- Design trade simulation logic for easy expansion and testing

GEMINI AI INTEGRATION STRATEGY:
- Parse natural language trade questions into structured queries
- Query MongoDB for relevant player/team/series data
- Calculate statistical impact using basketball metrics (PER, Win Shares, etc.)
- Generate fan-friendly explanations referencing actual 2023-24 context
- Use betting odds and upset history to add realistic scenario analysis

CURRENT PROJECT STATUS:
‚úÖ Database: Complete with 213 players + 15 playoff series
‚úÖ Performance: Optimized with 11 indexes (sub-100ms queries)
‚úÖ Data Quality: Transparent about verified vs estimated data
‚úÖ GitHub: Professional repository with comprehensive README
üîÑ Next: Build trade simulation engine core logic
üîÑ Next: Implement Gemini AI natural language processing
üîÑ Next: Create React frontend for user interaction